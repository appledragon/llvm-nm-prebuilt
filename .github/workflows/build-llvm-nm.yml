name: Build LLVM-NM Prebuilt Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag name'
        required: false
        default: 'nightly'

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Cache LLVM source
      uses: actions/cache@v4
      id: cache-llvm
      with:
        path: llvm-project
        key: llvm-20.1.8-src

    - name: Download LLVM source code
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        curl -L -o llvm-project.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/llvm-project-20.1.8.src.tar.xz
        tar -xf llvm-project.tar.xz
        mv llvm-project-20.1.8.src llvm-project

    - name: Install Homebrew and dependencies (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        # Install Rosetta 2 for x86_64 emulation
        sudo softwareupdate --install-rosetta --agree-to-license
        
        # Install x86_64 Homebrew if it doesn't exist
        if [ ! -f /usr/local/bin/brew ]; then
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install dependencies using x86_64 Homebrew (without zstd to avoid conflicts)
        arch -x86_64 /usr/local/bin/brew install cmake ninja

    - name: Install dependencies (arm64)
      if: matrix.arch == 'arm64'
      run: |
        brew install cmake ninja zstd

    - name: Set environment for x86_64
      if: matrix.arch == 'x86_64'
      run: |
        echo "CMAKE_PREFIX_PATH=/usr/local" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
        echo "LDFLAGS=-L/usr/local/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/include" >> $GITHUB_ENV

    - name: Set environment for arm64
      if: matrix.arch == 'arm64'
      run: |
        echo "CMAKE_PREFIX_PATH=/opt/homebrew" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
        echo "LDFLAGS=-L/opt/homebrew/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV

    - name: Configure and build llvm-nm (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        # Clear any ARM64 paths that might interfere
        export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        export CMAKE_PREFIX_PATH="/usr/local"
        export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
        
        mkdir build
        cd build
        arch -x86_64 /usr/local/bin/cmake -G Ninja ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS=llvm \
          -DLLVM_TOOL_LLVM_NM_BUILD=ON \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_PREFIX_PATH="/usr/local" \
          -DCMAKE_C_FLAGS="-arch x86_64" \
          -DCMAKE_CXX_FLAGS="-arch x86_64" \
          -DCMAKE_EXE_LINKER_FLAGS="-arch x86_64" \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DLLVM_ENABLE_ZLIB=OFF \
          -DLLVM_ENABLE_LIBXML2=OFF
        arch -x86_64 /usr/local/bin/ninja llvm-nm

    - name: Configure and build llvm-nm (arm64)
      if: matrix.arch == 'arm64'
      run: |
        mkdir build
        cd build
        cmake -G Ninja ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS=llvm \
          -DLLVM_TOOL_LLVM_NM_BUILD=ON \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_PREFIX_PATH="/opt/homebrew" \
          -DZSTD_ROOT="/opt/homebrew"
        ninja llvm-nm

    - name: Prepare artifact
      run: |
        mkdir -p llvm-nm-macos-${{ matrix.arch }}
        cp build/bin/llvm-nm llvm-nm-macos-${{ matrix.arch }}/

    - name: Archive
      run: |
        tar -czf llvm-nm-macos-${{ matrix.arch }}.tar.gz llvm-nm-macos-${{ matrix.arch }}/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: llvm-nm-macos-${{ matrix.arch }}
        path: llvm-nm-macos-${{ matrix.arch }}.tar.gz

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Cache LLVM source
      uses: actions/cache@v4
      id: cache-llvm
      with:
        path: llvm-project
        key: llvm-20.1.8-src

    - name: Download LLVM source code
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        curl -L -o llvm-project.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/llvm-project-20.1.8.src.tar.xz
        tar -xf llvm-project.tar.xz
        mv llvm-project-20.1.8.src llvm-project

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y cmake ninja-build build-essential libzstd-dev

    - name: Configure and build llvm-nm
      run: |
        mkdir build
        cd build
        cmake -G Ninja ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS=llvm \
          -DLLVM_TOOL_LLVM_NM_BUILD=ON \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -DCMAKE_BUILD_TYPE=Release
        ninja llvm-nm

    - name: Prepare artifact
      run: |
        mkdir -p llvm-nm-linux-x86_64
        cp build/bin/llvm-nm llvm-nm-linux-x86_64/

    - name: Archive
      run: |
        tar -czf llvm-nm-linux-x86_64.tar.gz llvm-nm-linux-x86_64/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: llvm-nm-linux-x86_64
        path: llvm-nm-linux-x86_64.tar.gz

  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Cache LLVM source
      uses: actions/cache@v4
      id: cache-llvm
      with:
        path: llvm-project
        key: llvm-20.1.8-src

    - name: Download LLVM source code
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        # Try multiple download methods for better reliability
        $uri = "https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/llvm-project-20.1.8.src.tar.xz"
        $output = "llvm-project.tar.xz"
        
        # Method 1: Try curl first (often faster on Windows runners)
        try {
          Write-Host "Trying curl download..."
          curl.exe -L -o $output $uri --connect-timeout 30 --max-time 600
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Curl download successful"
          } else {
            throw "Curl failed"
          }
        } catch {
          Write-Host "Curl failed, trying Invoke-WebRequest..."
          # Method 2: Fallback to Invoke-WebRequest with optimized settings
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $uri -OutFile $output -TimeoutSec 600
        }
        
        # Check if file exists and show size
        if (Test-Path $output) {
          $fileSize = (Get-Item $output).Length / 1MB
          Write-Host "Downloaded file size: $([math]::Round($fileSize, 2)) MB"
        } else {
          throw "Download failed - file not found"
        }
        
        # Extract the archive with simple method
        Write-Host "Starting extraction..."
        try {
          # Try using Windows built-in tar first
          Write-Host "Using tar command..."
          & tar -xf $output
          Write-Host "Tar extraction completed"
        } catch {
          Write-Host "Tar failed, trying alternative extraction..."
          # Fallback: try using 7zip if available
          if (Get-Command 7z -ErrorAction SilentlyContinue) {
            Write-Host "Using 7zip..."
            & 7z x $output
            & 7z x "llvm-project.tar"
          } else {
            throw "No suitable extraction tool found"
          }
        }
        
        # Check if extraction was successful
        Write-Host "Checking extraction result..."
        if (Test-Path "llvm-project-20.1.8.src") {
          Write-Host "Extraction successful, renaming directory..."
          if (Test-Path "llvm-project") {
            Remove-Item "llvm-project" -Recurse -Force
          }
          Rename-Item "llvm-project-20.1.8.src" "llvm-project"
          Write-Host "Directory renamed successfully"
        } else {
          Write-Host "Extraction failed - source directory not found"
          Write-Host "Available files and directories:"
          Get-ChildItem | Format-Table Name, Length -AutoSize
          throw "Extraction failed"
        }
        
        # Verify final result
        if (Test-Path "llvm-project\llvm") {
          Write-Host "LLVM source setup completed successfully"
        } else {
          Write-Host "Final verification failed - llvm subdirectory not found"
          if (Test-Path "llvm-project") {
            Write-Host "llvm-project directory exists but llvm subdirectory missing"
            Get-ChildItem llvm-project | Select-Object -First 5 | Format-Table Name -AutoSize
          }
          throw "Final verification failed"
        }
      shell: pwsh

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3

    - name: Install dependencies
      run: choco install cmake ninja

    - name: Configure and build llvm-nm
      run: |
        mkdir build
        cd build
        cmake -G "Ninja" ../llvm-project/llvm `
          -DLLVM_ENABLE_PROJECTS=llvm `
          -DLLVM_TOOL_LLVM_NM_BUILD=ON `
          -DLLVM_TARGETS_TO_BUILD=X86 `
          -DCMAKE_BUILD_TYPE=Release `
          -DLLVM_USE_CRT_RELEASE=MT `
          -DLLVM_BUILD_STATIC=ON `
          -DLLVM_LINK_LLVM_DYLIB=OFF `
          -DBUILD_SHARED_LIBS=OFF
        ninja llvm-nm
      shell: pwsh

    - name: Verify static linking
      run: |
        echo "Checking dependencies of llvm-nm.exe:"
        dumpbin /dependents build\bin\llvm-nm.exe
      shell: cmd

    - name: Prepare artifact
      run: |
        mkdir llvm-nm-windows-${{ matrix.arch }}
        copy build\bin\llvm-nm.exe llvm-nm-windows-${{ matrix.arch }}\
      shell: cmd

    - name: Archive
      run: |
        Compress-Archive -Path llvm-nm-windows-${{ matrix.arch }}\* -DestinationPath llvm-nm-windows-${{ matrix.arch }}.zip
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: llvm-nm-windows-${{ matrix.arch }}
        path: llvm-nm-windows-${{ matrix.arch }}.zip

  create-release:
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release-assets
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        name: LLVM-NM Prebuilt Binaries ${{ github.event.inputs.release_tag || github.ref_name }}
        body: >-
          ## LLVM-NM Prebuilt Binaries

          适用于 macOS (arm64/x86_64)、Windows (x64/x86)、Linux (x86_64) 的预编译 llvm-nm 二进制包。

          构建 commit: ${{ github.sha }}
        files: release-assets/*
        draft: false
        prerelease: ${{ github.event.inputs.release_tag == 'nightly' || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}